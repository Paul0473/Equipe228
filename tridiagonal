import numpy as np
import scipy.sparse
import scipy.sparse.linalg
import time

def tridiagonal(D, I, S, b):
    """
    Résout le système linéaire Ax = b où A est une matrice tridiagonale.
    
    D : Diagonale principale
    I : Diagonale inférieure
    S : Diagonale supérieure
    b : Vecteur des constantes (termes de droite)
    """
    N = len(D)
    
    # Création de la matrice tridiagonale sparse
    A = scipy.sparse.diags([I, D, S], offsets=[-1, 0, 1], shape=(N, N), format='csr')
    
    # Résolution du système
    start_time = time.time()
    x = scipy.sparse.linalg.spsolve(A, b)
    end_time = time.time()
    
    print(f"Temps de résolution : {end_time - start_time} secondes")
    
    return x

# Test avec une grande matrice
N = 15000
D = np.full(N, 4)  # Diagonale principale
I = np.full(N-1, 1)  # Diagonale inférieure
S = np.full(N-1, 1)  # Diagonale supérieure
b = np.random.rand(N)  # Vecteur b arbitraire

# Tester la fonction
x = tridiagonal(D, I, S, b)
